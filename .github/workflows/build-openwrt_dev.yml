name: Build OpenWrt (Dev)

on:
  # schedule:
  #   - cron: "0 0 * * *"
  repository_dispatch:
  workflow_dispatch:
    inputs:
      OpenWrt_Repository:
        description: "OpenWrt Repository"
        required: true
        default: "git.openwrt.org/openwrt/openwrt.git"
        type: string
      OpenWrt_Branch:
        description: "OpenWrt Branch"
        required: true
        default: "main"
        type: string
      Target_System:
        description: "Target System"
        required: true
        default: "x86"
        # type: string
        type: choice
        options:
          - "x86"
          - "MediaTek_Ralink_ARM"
          - "MediaTek_Ralink_MIPS"
      Subtarget:
        description: "Subtarget"
        required: true
        default: "x86_64"
        # type: string
        type: choice
        options:
          - "x86_64"
          - "MT798x"
          - "MT7620"
      Target_Profile:
        description: "Target Profile"
        required: false
        default: ""
        type: string
      continue_on_error:
        description: "Continue compiling on error? (true/false)"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
  workflow_call:
    inputs:
      OpenWrt_Repository:
        description: "OpenWrt Repository URL"
        required: true
        type: string
      OpenWrt_Branch:
        description: "OpenWrt Branch Name"
        required: true
        type: string
      Target_System:
        description: "Target System"
        required: true
        type: string
      Subtarget:
        description: "Subtarget"
        required: true
        type: string
      Target_Profile:
        description: "Target Profile"
        required: false
        type: string

run-name: Openwrt - ${{ inputs.OpenWrt_Branch }} - ${{ inputs.Target_System }} - ${{ inputs.Subtarget }} - ${{ inputs.Target_Profile || inputs.Subtarget }}

jobs:
  build:
    name: Build Openwrt - ${{ inputs.OpenWrt_Branch }} - ${{ inputs.Target_System }} - ${{ inputs.Subtarget }} - ${{ inputs.Target_Profile || inputs.Subtarget }}
    runs-on: ubuntu-24.04
    steps:
      - name: Set environment variable
        id: var
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          continue_on_error="${{ inputs.continue_on_error || 'false' }}"

          # ========== Openwrt make menuconfig ==========
          Target_System="${{ inputs.Target_System }}"
          Subtarget="${{ inputs.Subtarget }}"
          Target_Profile="${{ inputs.Target_Profile }}"
          if [[ -z "$Target_Profile" ]]; then
            Target_Profile="$Subtarget"
          fi

          # ========== Set OpenWrt repo branch ==========
          repo_openwrt="https://${{ inputs.OpenWrt_Repository }}"
          repo_openwrt_branch="${{ inputs.OpenWrt_Branch }}"
          repo_diy="https://github.com/${{ github.repository }}"
          repo_diy_owner="${{ github.repository_owner }}"

          # Simplified path construction
          dir_build="build"
          dir_openwrt="openwrt"
          dir_diy="DIY"
          dir_output="output"
          dir_target="${Target_System}/${Subtarget}/${Target_Profile}"

          path_build="/${dir_build}"
          path_openwrt="${path_build}/${dir_openwrt}"
          path_diy="${path_build}/${dir_diy}"
          path_output="${path_build}/${dir_output}"
          path_target="${path_diy}/${dir_target}"

          # DIY Files
          diy_config="${path_target}/${Target_Profile}.config"
          diy_feeds="${path_target}/feeds.conf.default"
          diy_p1_sh="${path_target}/diy-part1.sh"
          diy_p2_sh="${path_target}/diy-part2.sh"
          diy_files="${path_target}/files"
          diy_patches="${path_target}/patches"
          release_md="${path_target}/release.md"

          # ========== GITHUB_ENV ==========
          env_vars=(
            "continue_on_error"
            "repo_openwrt"
            "repo_openwrt_branch"
            "repo_diy"
            "repo_diy_owner"
            "Target_System"
            "Subtarget"
            "Target_Profile"
            "path_build"
            "path_openwrt"
            "path_output"
            "path_diy"
            "path_target"
            "diy_config"
            "diy_feeds"
            "diy_p1_sh"
            "diy_p2_sh"
            "diy_files"
            "diy_patches"
            "release_md"
          )
          for var in "${env_vars[@]}"; do
            echo "${var}=${!var}" | tee -a $GITHUB_ENV
          done

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clean Snap
        id: clean-snap
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          sudo -E apt-get -qq -y update
          sudo snap list

          # ===== Remove snap =====
          for p in $(snap list | awk '{print $1}'); do
            sudo snap remove $p
          done
          sudo systemctl stop snapd
          sudo systemctl disable --now snapd.socket
          sudo apt-get -qq -y autoremove --purge snapd
          sudo rm -rf ~/snap
          sudo rm -rf /snap
          sudo rm -rf /var/snap
          sudo rm -rf /var/lib/snapd
          sudo rm -rf /var/cache/snapd
          sudo bash -c 'cat <<EOF > /etc/apt/preferences.d/nosnap.pref
          Package: snapd
          Pin: release a=*
          Pin-Priority: -10
          EOF'
          sudo -E systemctl daemon-reload

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clear environment
        id: clearinit
        # if: ${{ 'true' == 'false' }} # disable
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          docker image list
          # 删除docker所有镜像
          # for image in $(docker images -q); do
          #   docker rmi -f $image
          # done
          # 删除所有不再使用的 docker 镜像、容器、网络和数据卷
          docker image prune -a

          # 如果环境变量 AGENT_TOOLSDIRECTORY 不为空，则删除该目录及其所有内容
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # 删除指定的目录及其所有内容，忽略所有错误信息
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 关闭所有交换空间 删除指定的交换文件
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile

          # ===== Clean apt =====
          packages_purge=(
            "docker*"
            "ghc*"
            "zulu*"
            "google*"
            "firefox*"
            "dotnet*"
            "powershell*"
            "openjdk*"
            "mongodb*"
            "moby*"
            "mysql*"
            "postgresql*"
            "sqlite3*"
            "apache2*"
            "nginx*"
            "php*"
          )
          sudo -E apt-get -qq -y update
          sudo -E apt-get -qq -y purge "${packages_purge[@]}" || true
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload
          apt list --installed
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n

          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          packages_install=(
            "ack"
            "antlr3"
            "asciidoc"
            "autoconf"
            "automake"
            "autopoint"
            "bc"
            "binutils"
            "bison"
            "build-essential"
            "bzip2"
            "ca-certificates"
            "clang"
            "clangd"
            "cmake"
            "cpio"
            "curl"
            "device-tree-compiler"
            "dwarves"
            "ecj"
            "fastjar"
            "flex"
            "gawk"
            "g++"
            "gcc"
            "gcc-aarch64-linux-gnu"
            "git"
            "git-lfs"
            "gnupg"
            "gperf"
            "haveged"
            "help2man"
            "intltool"
            "jq"
            "libelf-dev"
            "libglib2.0-dev"
            "libgmp3-dev"
            "libltdl-dev"
            "libmpc-dev"
            "libmpfr-dev"
            "libncurses5-dev"
            "libreadline-dev"
            "libssl-dev"
            "libtool"
            "libxml2"
            "libxml2-utils"
            "lld"
            "lldb"
            "lz4"
            "lzop"
            "make"
            "mkisofs"
            "ninja-build"
            "p7zip-full"
            "patch"
            "pkgconf"
            "python3"
            "python3-pip"
            "re2c"
            "rsync"
            "schedtool"
            "scons"
            "squashfs-tools"
            "subversion"
            "swig"
            "uglifyjs"
            "unzip"
            "vim"
            "wget"
            "xsltproc"
            "zip"
            "zlib1g-dev"
          )
          # Commented out packages (sorted):
          # "ccache"
          # "lib32gcc-s1"
          # "libc6-dev-i386"
          # "libdb++-dev"
          # "gcc-multilib"
          # "g++-multilib"
          # "libncursesw5"
          # "libncursesw5-dev"
          # "lrzsz"
          # "msmtp"
          # "nano"
          # "p7zip"
          # "python3-docutils"
          # "python3-ply"
          # "qemu-utils"
          # "texinfo"
          # "xmlto"
          # "xxd"
          packages_slim=(
            "bc"
            "bison"
            "build-essential"
            "ca-certificates"
            "curl"
            "flex"
            "g++"
            "gcc"
            "gcc-aarch64-linux-gnu"
            "git"
            "git-lfs"
            "gnupg"
            "gperf"
            "libelf-dev"
            "lz4"
            "libssl-dev"
            "libxml2"
            "libxml2-utils"
            "lzop"
            "make"
            "python3"
            "rsync"
            "schedtool"
            "squashfs-tools"
            "vim"
            "xsltproc"
            "zip"
            "zlib1g-dev"
          )
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install "${packages_install[@]}"
          # sudo -E apt-get -y -qq install "${packages_slim[@]}"
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload

          # Verify Make version
          make --version
          # Verify GCC version
          gcc --version

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Switch for GNU C++ & AArch64 Cross-Compiler
        id: switch-gcc
        # if: ${{ 'true' == 'false' }} # disable
        env:
          DEBIAN_FRONTEND: noninteractive
          gcc_version: ${{ env.gcc_version || '14' }}
        run: |
          echo -e "Current working directory: $(pwd)"

          sudo -E apt-get -yqq update

          packages_install=(
            "gcc-${gcc_version}"
            "g++-${gcc_version}"
            "gcc-${gcc_version}-multilib"
            "g++-${gcc_version}-multilib"
            "gcc-${gcc_version}-aarch64-linux-gnu"
            "cpp-${gcc_version}-aarch64-linux-gnu"
          )
          sudo -E apt-get -yqq install "${packages_install[@]}"

          # 设置 update-alternatives 以管理不同版本的GCC、G++和AArch64工具
          ls /usr/bin/gcc-* /usr/bin/g++-*
          tools_gcc=(
            "gcc"
            "gcc-ar"
            "gcc-nm"
            "gcc-ranlib"
            "g++"
          )
          for tool in "${tools_gcc[@]}"; do
            versions=$(ls /usr/bin/${tool}-* | grep -Eo '[0-9]+$' | sort -u)
            for version in ${versions}; do
              sudo update-alternatives --install /usr/bin/${tool} ${tool} /usr/bin/${tool}-${version} ${version}
            done
          done
          sudo update-alternatives --query gcc
          sudo update-alternatives --query g++
          # 切换到所需版本
          for tool in "${tools_gcc[@]}"; do
            sudo update-alternatives --set ${tool} /usr/bin/${tool}-${gcc_version}
          done
          # 验证版本
          gcc --version
          g++ --version

          # AArch64专用设置，涵盖所有带版本号的aarch64-linux-gnu工具
          ls /usr/bin/aarch64-linux-gnu-*
          tools_aarch64=(
            "aarch64-linux-gnu-gcc"
            "aarch64-linux-gnu-cpp"
            "aarch64-linux-gnu-gcc-ar"
            "aarch64-linux-gnu-gcc-nm"
            "aarch64-linux-gnu-gcc-ranlib"
            "aarch64-linux-gnu-gcov"
            "aarch64-linux-gnu-gcov-dump"
            "aarch64-linux-gnu-gcov-tool"
            "aarch64-linux-gnu-lto-dump"
          )
          for tool in "${tools_aarch64[@]}"; do
            versions=$(ls /usr/bin/${tool}-* 2>/dev/null | grep -Eo '[0-9]+$' | sort -u)
            for version in ${versions}; do
              sudo update-alternatives --install /usr/bin/${tool} ${tool} /usr/bin/${tool}-${version} ${version}
            done
          done
          sudo update-alternatives --query aarch64-linux-gnu-gcc
          # 切换到所需版本
          for tool in "${tools_aarch64[@]}"; do
            sudo update-alternatives --set ${tool} /usr/bin/${tool}-${gcc_version}
          done

          # 验证版本
          aarch64-linux-gnu-gcc --version

          echo "Switched to GCC/G++ and AArch64 GCC version ${gcc_version}."
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        env:
          path_build: ${{ env.path_build }}
          mnt_num: 1
          root_num: 4
        working-directory: /
        run: |
          echo "Current working directory: $(pwd)"

          # 获取 /mnt 和 / 分区的剩余空间
          mnt_available=$(df -B1 /mnt | tail -1 | awk '{print $4}')
          root_available=$(df -B1 / | tail -1 | awk '{print $4}')
          echo "Raw available space in /mnt (bytes): ${mnt_available}"
          echo "Raw available space in / (bytes): ${root_available}"

          # 减去缓冲空间：/mnt 和 / 分区分别减去缓冲
          gb2bytes=$((1024 * 1024 * 1024))
          mnt_size=$((${mnt_available} - ${{ env.mnt_num }} * ${gb2bytes} ))
          root_size=$((${root_available} - ${{ env.root_num }} * ${gb2bytes} ))
          echo "Available space in /mnt (bytes): ${mnt_size}"
          echo "Available space in / (bytes): ${root_size}"

          # 使用 LVM 创建物理卷、卷组和逻辑卷
          # sudo pvcreate /dev/loop6
          # sudo vgcreate github /dev/loop6

          # 使用 LVM 创建物理卷、卷组和逻辑卷，将文件关联到 loop 设备, 在这两个 loop 设备上创建物理卷, 创建一个名为 github 的卷组，包含这两个物理卷
          sudo truncate -s "${mnt_size}" /mnt/mnt.img
          sudo truncate -s "${root_size}" /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7

          # 在 github 卷组上创建一个名为 runner 的逻辑卷，使用所有可用空间, 在 runner 逻辑卷上创建一个 XFS 文件系统
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner

          # 创建一个挂载点 ${path_build}, 将 runner 逻辑卷挂载到 ${path_build}, 将 ${path_build} 的所有者和组更改为 runner
          sudo mkdir -p "${path_build}"
          sudo mount /dev/github/runner "${path_build}"
          sudo chown -R runner:runner "${path_build}"

          df -Th
          echo "status=success" >> "${GITHUB_OUTPUT}"

      - name: Clone OpenWrt
        id: clonesys
        if: ${{ steps.disk.outputs.status }} == 'success' && !cancelled()
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          git clone ${repo_openwrt} ${path_openwrt} --single-branch --depth=1 --branch=${repo_openwrt_branch}
          echo -e "repo_openwrt: [ ${repo_openwrt} ]\nBRANCH: [ ${repo_openwrt_branch} ]"

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone DIY
        id: clonediy
        if: ${{ steps.disk.outputs.status }} == 'success' && !cancelled()
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          git clone ${repo_diy} ${path_diy} --single-branch --depth=1 --branch=main
          echo -e "repo_diy: [ ${repo_diy} ]\nBRANCH: [ main ]"

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Check environment
        id: checkenv
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          # List all environment variables
          printenv

          echo -e "# ========== Path =========="
          declare -a paths=("${{ env.path_build }}" "${{ env.path_openwrt }}" "${{ env.path_diy }}" "${{ env.path_output }}" "${{ env.path_target }}" "${{ env.diy_patches }}")
          for path in "${paths[@]}"
          do
            echo "Checking and preparing $path"
            if [ ! -d "$path" ]; then
              echo "$path does not exist, creating..."
              mkdir -p "$path"
            fi
            echo "Listing contents of $path"
            ls -lh "$path"
          done

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (feeds.conf.default) Load custom feeds
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${diy_feeds}" && ! "${diy_feeds}" -ef "${path_openwrt}/feeds.conf.default" ]]; then
            echo -e "diy_feeds: ${diy_feeds}"
            cp -f ${diy_feeds} ${path_openwrt}/feeds.conf.default
          fi

      - name: (DIY_P1.sh) after load feeds, before update feeds
        working-directory: ${{ env.path_openwrt }}
        env:
          file_script: ${{ env.diy_p1_sh }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${file_script}" ]]; then
            echo -e "file_script: ${file_script}"
            chmod +x ${file_script}
            bash ${file_script}
            cat ${file_script}
          fi

      - name: Update feeds
        id: update
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"
          cat ./feeds.conf.default
          ./scripts/feeds update -a
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Install feeds
        id: install
        working-directory: ${{ env.path_openwrt }}
        if: ${{ steps.update.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          ./scripts/feeds install -a
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (/files) Load custom files
        id: files
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"

          mkdir -p ./files/etc/config
          if [[ -e "${diy_files}" ]]; then
              cp -rf ${diy_files}/* ./files/
          fi

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (.config) Load custom configuration
        id: config
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"

          if [[ -e "${diy_config}" && ! "${diy_config}" -ef "${path_openwrt}/.config" ]]; then
            echo -e "diy_config: ${diy_config}"
            cp -f ${diy_config} ${path_openwrt}/.config
          else
            echo ".config file not found"
          fi

          yes "" | make oldconfig
          cat ./.config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (patches) Apply patches
        id: patch
        if: ${{ 'true' == 'false' }} # disable
        env:
          diy_patches: ${{ env.diy_patches }}
        working-directory: ${{ env.path_openwrt }}
        run: |
          printf "Current working directory: %s\n" "$(pwd)"

          if [ -d "${diy_patches}" ]; then
            find "${diy_patches}" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%' | patch -d './' -B --merge -p1 --forward"
          fi

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (DIY_P2.sh) after install feeds, before download package
        working-directory: ${{ env.path_openwrt }}
        env:
          file_script: ${{ env.diy_p2_sh }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${file_script}" ]]; then
            echo -e "file_script: ${file_script}"
            chmod +x ${file_script}
            bash ${file_script}
            cat ${file_script}
          fi

      - name: (.config) Update config
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"
          echo "make oldconfig: update .config file..."
          yes "" | make oldconfig
          cat ./.config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Download package
        id: package
        working-directory: ${{ env.path_openwrt }}
        if: ${{ steps.install.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "make download: $(($(nproc) + 1)) thread"
          make download -j$(($(nproc) + 1))
          # find dl -size -1024c -exec ls -l {} \;
          # find dl -size -1024c -exec rm -f {} \;
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile the OpenWrt
        id: compile
        working-directory: ${{ env.path_openwrt }}
        if: ${{ steps.package.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "$(($(nproc) + 1)) thread compile"
          if [ "${{ env.continue_on_error }}" == "true" ]; then
            make -j$(($(nproc) + 1)) V=s -k
          else
            make -j$(($(nproc) + 1)) V=s
          fi
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Copy to output
        id: copy
        working-directory: /
        env:
          PATH_TARGET: ${{ env.path_openwrt }}/bin/targets/*/*/*
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          [[ -e "${path_output}" ]] || mkdir -p ${path_output}
          cp -rf ${PATH_TARGET} ${path_output}/
          cp -f ${path_openwrt}/.config ${path_output}/config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Setup output
        id: output
        working-directory: ${{ env.path_output }}
        if: ${{ steps.copy.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          # handle Dir packages
          ls -lhR ./packages
          rm -rf ./packages

          # for file in *.bin
          # do
          #   if [[ ! -d "${file}" ]]
          #   then
          #     sha256sum "${file}" > "${file}.sha"
          #   fi
          # done

          echo -e "timestamp=$(date +"%y%mw%V")" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: "[release.md] Record release.md"
        id: record
        working-directory: ${{ env.path_openwrt }}
        run: |
          printf "Current working directory: %s\n" "$(pwd)"

          release_md_dir=$(dirname ${release_md})
          mkdir -p ${release_md_dir}
          : > ${release_md}

          record_to_markdown() {
            local title="$1"
            local content="$2"
            local code_block="${3:-}"
            local format="\n### %s\n%s\n"

            if [[ -n "${code_block}" ]]; then
              format="\n### %s\n\n<details>\n<summary>%s</summary>\n\n\`\`\`%s\n%s\n\`\`\`\n\n</details>\n"
              printf "${format}" "${title}" "${title}" "${code_block}" "${content}" | tee -a ${release_md}
            else
              printf "${format}" "${title}" "${content}" | tee -a ${release_md}
            fi
          }

          # 记录Clone源码的分支和构建者、编译完成时间
          # record_to_markdown "Build ${Target_Profile} - by ${repo_diy_owner}" ""
          # record_to_markdown "OpenWrt branch" "- [${openwrt_branch};${repo_openwrt_branch}](${repo_openwrt}/tree/${repo_openwrt_branch})"
          record_to_markdown "Target" "- [x] ${Target_System} - ${Subtarget} - ${Target_Profile}"
          record_to_markdown "Timestamp" "- [x] $(date +"%Y-%m-%d %H:%M:%S %z")"
          record_to_markdown "Repository" "- [x] ${repo_openwrt}"
          record_to_markdown "Repository Branch" "- [x] ${repo_openwrt_branch}"

          declare -A file_records=(
            ["${diy_feeds}"]="feeds setting|bash"
            ["${diy_p1_sh}"]="$(basename "${diy_p1_sh}")|bash"
            ["${diy_p2_sh}"]="$(basename "${diy_p2_sh}")|bash"
            ["${diy_config}"]="pre-config|makefile"
            ["${{ env.path_openwrt }}/.config"]=".config|makefile"
          )
          for file_path in "${!file_records[@]}"; do
            if [[ -f $file_path ]]; then
              IFS='|' read -r section_title file_type <<< "${file_records[$file_path]}"
              # 合并grep命令，一次性移除注释和空行
              code_content=$(grep -E '^[^#]' "$file_path" | grep -Ev '^\s*$' | sed 's/\s\+$//g')
              record_to_markdown "$section_title" "$code_content" "$file_type"
            fi
          done

          # 读取profiles.json
          profiles_json_path="${{ env.path_output }}/profiles.json"
          profiles_json_content=$(jq '.' "$profiles_json_path")
          # record_to_markdown "Profiles" "$profiles_json_content" "json"

          cat ${release_md}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload OpenWrt to Release
        id: release
        uses: ncipollo/release-action@main
        if: ${{ steps.output.outputs.status }} == 'success' && !cancelled()
        env:
          timestamp: ${{ steps.output.outputs.timestamp }}
        with:
          name: "${{ env.Target_System }}_${{ env.Subtarget }}_${{ env.Target_Profile }}"
          tag: "${{ env.Target_Profile }}"
          artifacts: "${{ env.path_output }}/*"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          bodyFile: "${{ env.release_md }}"
          # body: ""

      - name: Clear workspace
        id: clearwork
        if: ${{ 'true' == 'false' }} # disable
        working-directory: ${{ env.path_build }}
        run: |
          # rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
          rm -rf ./* 2>/dev/null
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
