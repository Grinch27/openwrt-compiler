name: Call Build

on:
  schedule:
    - cron: "0 0 * * *"
  repository_dispatch:
  workflow_dispatch:

env:
  TZ: UTC

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          [
            {
              OpenWrt_Repository: "git.openwrt.org/openwrt/openwrt.git",
              OpenWrt_Branch: "main",
              Target_System: "x86",
              Subtarget: "x86_64",
              Target_Profile: "",
            },
            {
              OpenWrt_Repository: "git.openwrt.org/openwrt/openwrt.git",
              OpenWrt_Branch: "main",
              Target_System: "MediaTek_Ralink_ARM",
              Subtarget: "MT798x",
              Target_Profile: "",
            },
            {
              OpenWrt_Repository: "git.openwrt.org/openwrt/openwrt.git",
              OpenWrt_Branch: "main",
              Target_System: "MediaTek_Ralink_ARM",
              Subtarget: "MT798x",
              Target_Profile: "nokia_ea0326gmp",
            },
          ]
      fail-fast: false
    steps:
      - name: Trigger workflow
        id: trigger
        env:
          branch: "main"
          workflow: "build-openwrt"
        working-directory: /
        run: |
          # Create base JSON using jq
          data=$(jq -n \
            --arg OpenWrt_Repository "${{ matrix.config.OpenWrt_Repository }}" \
            --arg OpenWrt_Branch "${{ matrix.config.OpenWrt_Branch }}" \
            --arg Target_System "${{ matrix.config.Target_System }}" \
            --arg Subtarget "${{ matrix.config.Subtarget }}" \
            --arg Target_Profile "${{ matrix.config.Target_Profile }}" \
            '{
              ref: "${{ env.branch }}",
              inputs: {
                OpenWrt_Repository: $OpenWrt_Repository,
                OpenWrt_Branch: $OpenWrt_Branch,
                Target_System: $Target_System,
                Subtarget: $Subtarget,
                Target_Profile: $Target_Profile
              }
            }')

          # Output the final JSON data for debugging (optional)
          echo "$data" | jq .
          
          # Use the generated data with curl
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.PAT }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.workflow }}.yml/dispatches \
            --data "$data"
